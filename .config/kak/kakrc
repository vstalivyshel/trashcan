colorscheme lotus
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
declare-option -hidden str glua "%val{config}/glua"

add-highlighter -override global/paren regex (\(|\)|\{|\}|\[|\]|<|>) 1:operator
add-highlighter -override global/ number-lines -relative -hlcursor -separator ' '
add-highlighter -override global/ show-matching 
set global ui_options terminal_assistant=none
set global tabstop 4
set global scrolloff 15,15
set global startup_info_version 999999999
set global autocomplete prompt
set global autoinfo 'command'


hook global -group insert-color ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}
hook global -group insert-color ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol 
} }

#------------------------------------------------------------------------------
#usm-filetype -----------------------------------------------------------------

hook global BufCreate .*[.](usm) %{
    set-option buffer filetype usm
}

hook global WinSetOption filetype=usm %{
    require-module usm
	set window comment_line ';;'
    add-highlighter window/usm ref usm
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/usm }
    hook -once -always window WinSetOption filetype=.* %{ remove-hooks window usm-.+ }
}

provide-module usm %{
    add-highlighter shared/usm regions
    add-highlighter shared/usm/code default-region group
    add-highlighter shared/usm/double_string region '"'   (?<!\\)(?:\\\\)*" fill string
    add-highlighter shared/usm/single_string region "'"   (?<!\\)(?:\\\\)*' fill string
    add-highlighter shared/usm/comment       region ';;'  $                 fill comment
    add-highlighter shared/usm/code/value regex \b([0-9]+(:?\.[0-9])?(:?[eE]-?[0-9]+)?|0x[0-9a-fA-F]|[0-9]+_(дроб|зціл|ціл))\b 0:value
    add-highlighter shared/usm/code/extern_func regex (%\w+) 0:function
    add-highlighter shared/usm/code/label regex (\w+:) 0:keyword
}

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

map global insert <c-w> '<a-;>h<a-;>b<a-;>"_d'
map global insert <c-h> <backspace>
map global insert <c-b> '<left>'
map global insert <c-f> '<right>'
map global insert <c-a> '<a-;>gi'
map global insert <c-e> '<a-;>gl<a-;>l'
map global insert <a-,> '<a-;><'
map global insert <a-.> '<a-;>>'
map global insert <c-d> '<a-;>;<a-;>"_d'

map global normal X 'x_'
map global normal . '<a-.>'
map global normal <a-.> '.'

map global goto n '<esc>:bn<ret>' \
    -docstring 'Goto next buffer'
map global goto p '<esc>:bp<ret>' \
    -docstring 'Goto previous buffer'

map global normal '#' ':comment-line<ret>'
map global user w ":w<ret>" \
    -docstring 'Save'

map global user y '<a-|>xsel --input --clipboard<ret>'\
    -docstring 'Yank into system Clipboard'

evaluate-commands %sh{
    keys='h j k l H J K L '
    keys+='o I O A ' 
    keys+='t T f F g G ] [ ' 
    keys+='b w e B W E ' 
    keys+='x X '
    keys+='c C d '
    keys+='m M n N '
    cmd=""
    for k in $keys; do
        cmd+="map global insert <a-$k> '<esc>$k' ; "
	done
	printf %s "eval %{ $cmd }"
}

map global normal / <c-s>/
map global normal ? <c-s>?
map global normal <a-/> <c-s><a-/>
map global normal <a-?> <c-s><a-?>
map global normal * <c-s>*

#------------------------------------------------------------------------------
# colors ----------------------------------------------------------------------

def make-color-current-file -override -command-completion %{
eval %sh{
    file="$kak_opt_filetype"
    if [ $file != "lua" ]; then
        printf %s "fail you are not in a lua color file!"
    else
        "$kak_opt_glua/make_color.lua" "$kak_buffile" "$kak_config/colors"
    fi 
} }
map global user M ':make-color-current-file<ret>' \
    -docstring 'Generate colorscheme from current lua specs'

# ------------------------------------------------------------------------------
# repl -------------------------------------------------------------------------

declare-user-mode window-mode
map global normal <c-w> ":enter-user-mode window-mode<ret>"

map global window-mode 'V' ':tmux-repl-horizontal<ret>' \
-docstring 'Open shell in vertical split'
map global window-mode 'S' ':tmux-repl-vertical<ret>' \
-docstring 'Open shell in vertical split'
map global window-mode 'T' ':tmux-repl-window<ret>' \
-docstring 'Open shell in vertical split'

def repl-eval-text \
-docstring "repl-eval-text [text-to-eval]: Evaluate text at the REPL\n
If no text is passed, then the selection is used" \
-override \
-params ..1 %{
eval %sh{ [ $# -eq 0 ] && printf "%s\n" "repl-send-text" || printf "%s %s\n" "repl-send-text %{$1}" }
nop %sh{ tmux send -t $kak_opt_tmux_repl_id "" C-m }
}
map global user R ':repl-eval-text<ret>' \
    -docstring 'Send selected text as command to repl'

def repl-send-prompt \
-override \
-params ..1 \
%{ prompt 'repl-cmd ' %{ repl-eval-text %val{text}} }
map global user r ':repl-send-prompt<ret>' \
	-docstring 'Prompt for command to send to repl'

def repl-eval-last-command \
-override \
-docstring "repl-eval-last-command: Re-run the last executed command at the REPL" \
 %{ nop %sh{tmux send -t $kak_opt_tmux_repl_id "Up" C-m} }
 map global user <a-r> ':repl-eval-last-command<ret>' \
 	-docstring 'Repeat last sent command to repl'

# ------------------------------------------------------------------------------
# splits ----------------------------------------------------------------------

declare-option -hidden str for_splits
declare-option -hidden str split_cmd 

def -hidden split-it-boy -params .. %{
    set buffer for_splits "e %val{buffile} ; select %val{selection_desc} ; exec vv; %arg{@}"
    %opt{split_cmd} kak -c %val{session} -e %opt{for_splits}
}

def buf-vsplit \
-override \
-params .. \
%{ set buffer split_cmd "tmux-terminal-horizontal" ; split-it-boy %arg{@} }
map global window-mode v ":buf-vsplit<ret>" \
    -docstring 'Open current buffer in vertical split'

def buf-hsplit \
-override \
-params .. \
%{ set buffer split_cmd "tmux-terminal-vertical" ; split-it-boy %arg{@} }
map global window-mode s ":buf-hsplit<ret>" \
    -docstring 'Open current buffer in horizontal split'

def buf-tab \
-override \
-params .. \
%{ set buffer split_cmd "tmux-terminal-window" ; split-it-boy %arg{@} }
map global window-mode t ":buf-tab<ret>" \
    -docstring 'Open current buffer in new tab'

map global window-mode q ":q<ret>" \
	-docstring 'Close current window'

#------------------------------------------------------------------------------
# little helper----------------------------------------------------------------

def pipe \
-docstring "Pipe shell output into new buffer" \
-override \
-shell-completion \
-params 1.. \
%{ eval %sh{
    tdir=$(mktemp -d -t kak-temp-XXXXXXXXX)
    fifo="$tdir/fifo"
    mkfifo $fifo
    ( $@ > ${fifo} 2>&1 & ) > /dev/null 2>&1 < /dev/null
    printf %s "e -fifo $fifo *pipe-output-buffer*;
      hook -always -once buffer BufCloseFifo .* %{
           nop %sh{ rm -r $tdir } ;
           eval -client $kak_client %{echo %{Completed '$@'}} ;
      }"
} }

def pdf-compile \
-override \
%{ eval %sh{
    file="$kak_buffile"
    fail() { printf %s "echo -markup {Error}$1"; exit 1; }
    [ ${file##*.} != 'tex' ] && fail 'Not in a latex document'
    ! type pdflatex > /dev/null && fail '`pdflatex` is not installed'
    printf %s "
    terminal %{ pdflatex -output-directory=$(dirname $file) $file && pkill -HUP mupdf }"
} }

def pdf-open \
-override \
-file-completion \
-params 1 \
%{ eval %sh{
    if [ ! -f $1 ] || [ ${1##*.} != "pdf" ]; then
        printf %s "fail Not a pdf document"
        exit 1
    fi
    ! type mupdf > /dev/null && printf %s "fail `mupdf` is not installed" && exit 1
    mupdf "$1" > /dev/null 2>&1 < /dev/null &
} }

def eval-selected \
-override \
%{ eval %val{selection} }
map global user ';' ':eval-selected<ret>' \
    -docstring 'Eval selected text'

def eval-selected-all \
-override \
%{ eval %sh{
     cmd="$kak_selection"
     for s in $(kak -l); do
         printf %s "$cmd" | kak -p $s
     done
} }
map global user ':' ':eval-selected-all<ret>' \
    -docstring 'Eval selected text for all sessions'

def swap-selections \
-override \
%{ try %{ exec '<a-z>a<a-)>' } }
map global normal <a-r> ':swap-selections<ret>'

def jump-to-mark \
-override \
    %{ on-key %{ try %{ exec %sh{ printf "\"%sz" "$kak_key" } } } }
map global normal \' ":jump-to-mark<ret>"

def surround-selection-custom \
-override \
%{prompt  'Custom-sur-obj: ' %{ eval -save-regs 'cz' %{
    set-register c %val{text}
    exec -draft -itersel 'Z"cPz"cpz'
} } }
map global user \' ":surround-selection-custom<ret>" \
    -docstring "Surrond selections with custom token"

def surround-selection \
-override \
-params ..1 \
%{ on-key %{ eval -save-regs 'oc' %{
eval %sh{
    spc=""
    [ -n "$1" ] && spc=" "
    o="$kak_key"
    c="$kak_key"
	case "$o" in
    	"<esc>") exit 0 ;;
        "<lt>" | "<gt>") o="<" c=">" ;;
        "(" | ")") o="(" c=")" ;;
    	"[" | "]") o="[" c="]" ;;
    	"{") c="}" ;;
	esac
	o="$o$spc"
	c="$spc$c"
	printf %s "set-register c %¶$c¶ ;
        	   set-register o %¶$o¶ ;"
}
exec -draft -itersel '"mZ"oP"mz"cp"mz'
} } }
map global normal <a-'> ':surround-selection<ret>'
map global normal <a-"> ':surround-selection true<ret>'

def remove-matching-forward \
-override \
%{exec -save-regs '^"' 'm;Zm;dzd'}

def remove-matching-backward \
-override \
%{exec -save-regs '^"' '<a-m>;Zm;dzd'}

map global normal <a-v> ':remove-matching-forward<ret>'
map global normal <a-V> ':remove-matching-backward<ret>'

def find-file \
-docstring 'Fuzzy search for the files from specified directory'\
-override \
-file-completion \
-params .. \
%{ eval %sh{
    printf %s "
    prompt  -menu  -shell-script-candidates %{
        find ${@} -type f -not -path '*/colors/*' -not -path '*/\.*/*' -not -path '*/target/*' 
    } 'File: '  %{ try %{ edit -existing %val{text} } } "
} }
map global user t ':find-file "../tests"<ret>' \
    -docstring 'Try to fuzzy search for the files in "../tests"'
map global user f ':find-file<ret>' \
    -docstring 'Fuzzy search for the files from current directory'
map global user F ':find-file ../<ret>' \
    -docstring 'Fuzzy search for the files from parent directory'

def find-buffer \
-docstring 'Open an exising buffer' \
-override \
%{ prompt -menu -buffer-completion 'Buffer: ' 'buffer %val{text}' }
map global user b ':find-buffer<ret>' \
    -docstring 'Serch for the active buffers'

def ls \
-docstring 'List files in the current directory' \
-override \
%{ info -title "%val{buffile}" %sh{ ls -Alh } }
map global normal <c-l> ":ls<ret>"

def sh \
-override \
-file-completion \
-params 1.. \
%{ echo -debug %sh{ "$@" } }

def close-buffers \
-docstring 'The current and the *debug* buffers will be ignored' \
-override \
-buffer-completion \
-params 1 \
%{ eval %sh{
    cmd=
    for b in $kak_buflist; do
        [[ "$b" == "$kak_bufname" ]] && continue
        [[ "$b" == "*debug*" ]] && continue
        [[ "$b" =~ $1 ]] && cmd+="db '$b'; " 
    done
    printf %s "$cmd" 
} }

def cb-all-not-current \
-override \
%{ close-buffers "^(?!.*%val{bufname})*." }

def set-filetype \
-docstring 'Set a filetype for current buffer' \
-override \
-params 1 \
%{ set-option current filetype %arg{1} }
alias global lang set-filetype

def new-file \
-docstring 'Create a new file(s)'\
-override \
-file-completion \
-params 1.. \
%{ echo %sh{ touch "$@" }; edit %arg{1} }
alias global nf new-file

#------------------------------------------------------------------------------
# langmap ---------------------------------------------------------------------

declare-option str alt_langmap 'ua'
declare-option str current_langmap 'en'

set-option global modelinefmt \
'%val{bufname} %val{cursor_line}:%val{cursor_char_column} 
{{context_info}} {{mode_info}} - %val{client}@[%val{session}] - (%opt{current_langmap})'

def toggle-langmap \
-override \
%{ evaluate-commands %sh{
    EN="\`~1!2@3#4\$5%6^7&8*9(0)_=+\\|qQwWeErRtTyYuUiIoOpP[{]}aAsSdDfFgGhHjJkKlL;:'\"zZxXcCvVbBnNmM,<.>/?"
    RU='ёЁ1!2"3№4;5%6:7?8*9(0)_=+\\/йЙцЦуУкКеЕнНгГшШщЩзЗхХъЪфФыЫвВаАпПрРоОлЛдДжЖэЭяЯчЧсСмМиИтТьЬбБюЮ.,'
    UA="'ʼ1!2\"3№4;5%6:7?8*9(0)_=+ґҐйЙцЦуУкКеЕнНгГшШщЩзЗхХїЇфФіІвВаАпПрРоОлЛдДжЖєЄяЯчЧсСмМиИтТьЬбБюЮ.,"

	NEW_CURRENT="en"
    DEFAULT_MAP="$EN"
    ALT_MAP="$UA"
    [ $kak_opt_alt_langmap == "ru" ] && ALT="$RU" 

    ACTION="unmap"
    [ "$kak_opt_current_langmap" == "$NEW_CURRENT" ] && NEW_CURRENT="$kak_opt_alt_langmap" && ACTION="map"

    CMD=
    for ((i=0; i < ${#DEFAULT_MAP}; i++)); do
        CMD+="${ACTION} global insert %§${DEFAULT_MAP:i:1}§ %§${ALT_MAP:i:1}§; "
    done

    printf %s "$CMD; set buffer current_langmap $NEW_CURRENT"
} }
map global insert '<c-^>' '<a-;>:toggle-langmap<ret>'
map global normal '<c-^>' '<a-;>:toggle-langmap<ret>'

#------------------------------------------------------------------------------
# Autosave

decl -hidden bool auto_save_enabled false
def enable-auto-save \
-override \
-params 1 \
%{ eval %sh{
    [ $kak_opt_auto_save_enabled == true ] && printf %s "fail Auto Save already enabled" && exit 1
    scope="buffer"
    printf %s "
    hook $1 -group auto-save NormalKey '.*' \
        %{ eval %sh{ [ \$kak_modified == true ] && printf %s "w"  } }
    set $1 auto_save_enabled true
    "
} }
def disable-auto-save \
-override \
-params 1 \
%{ eval %sh{
    [ $kak_opt_auto_save_enabled == false ] && printf %s "fail Auto Save already disabled" && exit 1
    printf %s "
    rmhooks $1 auto-save
    set $1 auto_save_enabled false
    "
} }

#------------------------------------------------------------------------------
#fmt --------------------------------------------------------------------------

hook -group filetype-config global WinSetOption filetype=(rust|lua|python|zig) \
 %{ evaluate-commands %sh{
    fmt_cmd=
    case "$kak_opt_filetype" in
        "rust") fmt_cmd="rustfmt";;
        "lua") fmt_cmd="stylua";;
        "python") fmt_cmd="black";;
        "zig") fmt_cmd="zig fmt";;
    esac
    if ! type "$fmt_cmd" &> /dev/null; then
        printf %s "fail No such command: $fmt_cmd"
    else
        printf %s "set window formatcmd %{$fmt_cmd $kak_buffile}"
    fi
 } }

#------------------------------------------------------------------------------
# LSP -------------------------------------------------------------------------

eval %sh{kak-lsp --kakoune -s $kak_session}
map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

lsp-inlay-diagnostics-enable global
set global lsp_hover_anchor true

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
source "%val{config}/find.kak"

source "%val{config}/cargo.kak"
declare-user-mode cargo

map global user n ':cargo-next-error<ret>' \
	-docstring 'Next "cargo" error/warning'
map global user p ':cargo-previous-error<ret>' \
	-docstring 'Previous "cargo" error/warning'

map global user c ':enter-user-mode cargo<ret>' \
	-docstring 'Cargo mode'
map global cargo t ':cargo test<ret>' \
	-docstring 'Run tests'
map global cargo c ':cargo clippy<ret>' \
	-docstring 'Run diagnostics'
