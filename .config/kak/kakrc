colorscheme lotus
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

declare-option -hidden str glua "%val{config}/glua"

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

add-highlighter -override global/ number-lines -relative -hlcursor -separator ' '
add-highlighter -override global/ show-matching 
set-option global ui_options terminal_assistant=none
set-option global tabstop 4
set-option global scrolloff 15,0
set-option global startup_info_version 999999999
set global autocomplete prompt

hook global -group insert-color ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}
hook global -group insert-color ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol 
} }

#------------------------------------------------------------------------------
#------------------------------------------------------------------------------

map global insert <c-w> '<a-;>h<a-;>b<a-;>"_d'
map global insert <c-h> <backspace>
map global insert <c-b> '<left>'
map global insert <c-f> '<right>'
map global insert <c-a> '<a-;>gi'
map global insert <c-e> '<a-;>gl<a-;>l'
map global insert <a-,> '<a-;><'
map global insert <a-.> '<a-;>>'
map global insert <c-d> '<a-;>;<a-;>"_d'
map global normal D '<a-z>a<a-(>'
map global normal X 'x_'
map global normal '#' ':comment-line<ret>'
map global normal . '<a-.>'
map global normal <a-.> '.'

map global user w ":w<ret>" \
    -docstring 'Save'
map global user ';' 'y:<c-r>"<ret>' \
    -docstring 'Push selected into cmd'
map global user ':' 'y:<c-r>"<ret>' \
    -docstring 'Push selected into cmd for all sessions'

# hook buffer -group testing NormalKey '.*' %{
#     echo %val{hook_param}
# }

# clipboard
map global user y '<a-|>xsel --input --clipboard<ret>'\
    -docstring 'Yank into system Clipboard'
map global user P '!xsel --output --clipboard<ret>'\
    -docstring 'Paste after a seletction from the system clipboard'
map global user p '<a-!>xsel --output --clipboard<ret>'\
    -docstring 'Paste before a seletction from the system clipboard'

evaluate-commands %sh{
    keys=( "h" "j" "k" "l"  "H" "J" "K" "L" )
    keys+=("o" "I" "O" "A" )
    keys+=("t" "T" "f" "F" "g" "G" "]" "[" )
    keys+=("b" "w" "e"  "B" "W" "E" )
    keys+=("x" "X")
    keys+=("c" "C" "d")
    keys+=("m" "M" "n" "N")
    cmd=""
    for k in "${keys[@]}"; do
        cmd+="map global insert <a-$k> '<esc>$k' ; "
	done
	printf %s "eval %{ $cmd }"
}

#------------------------------------------------------------------------------
# colors ----------------------------------------------------------------------

define-command make-color-current-file -override -command-completion %{
eval -client %val{client} %sh{
    file="$kak_opt_filetype"
    if [ $file != "lua" ]; then
        printf %s "fail you are not in lua color file!"
    else
        "$kak_opt_glua/lua_colors/make_color.lua" "$kak_buffile" "$kak_config/colors"
    fi 
} }
map global user M ':make-color-current-file<ret>'

#------------------------------------------------------------------------------
# splits ----------------------------------------------------------------------

define-command buf-vsplit \
    -override \
    %{ tmux-terminal-horizontal kak -c %val{session} -e \
    "e %val{buffile} ; select %val{selection_desc} ; exec vv"  }

define-command buf-hsplit \
    -override \
    %{ tmux-terminal-vertical kak -c %val{session} -e \
    "e %val{buffile} ; select %val{selection_desc} ; exec vv"  }

define-command buf-tab \
    -override \
    %{ tmux-terminal-window kak -c %val{session} -e \
    "e %val{buffile} ; select %val{selection_desc} ; exec vv"  }

declare-user-mode window-mode

map global normal <c-w> ":enter-user-mode window-mode<ret>"
map global window-mode q ":q<ret>" \
	-docstring 'Close current window'
map global window-mode v ":buf-vsplit<ret>" \
    -docstring 'Open current buffer in vertical split'
map global window-mode s ":buf-hsplit<ret>" \
    -docstring 'Open current buffer in horizontal split'
map global window-mode t ":buf-tab<ret>" \
    -docstring 'Open current buffer in new tab'


# ------------------------------------------------------------------------------
# auto-pairs--------------------------------------------------------------------

hook global -group auto-pairs InsertChar '(\(|\[|\Q"\E|\{|<)' \
%{ evaluate-commands -save-regs 'c' %{
        execute-keys  '<a-;>h'
        set-register 'c' %sh{ "$kak_opt_glua/pairs.lua" "$kak_selection" r}
        execute-keys -itersel '<a-;>;<a-;>"cp'
    }
    hook window -group insert-newline -once InsertChar '\n' %{
    execute-keys "<a-;>;<ret><esc>KK<a-&>j<a-gt>"
       execute-keys -with-hooks A
    }
    hook window -group auto-pairs -once InsertChar '[^\n]' %{
        remove-hooks window insert-newline  
    }
    hook window -group auto-pairs -once ModeChange pop:insert:.* %{
        remove-hooks window insert-newline
    } 
}

# declare-user-mode surround

# define-command -hidden -override surround-selection -params 1..2  %{
# 	evaluate-commands -save-regs 'rl' %sh{
#     	pairs="$kak_opt_pairs"
#     	r=$("$pairs" "$1" "r$2")
#     	l=$("$pairs" "$1" "l$2")
#     	printf %s "set-register r %{$r} ; set-register l %{$l}"
# 	}
# 	exec 
# }

# map global normal \' ":enter-user-mode surround<ret>"
# map global surround \' 

#------------------------------------------------------------------------------
# little helper----------------------------------------------------------------

define-command auto-info \
-docstring 'command|onkey|normal' \
-override \
-params 1 \
%{ set buffer autoinfo %arg{@} }

define-command kak-talk \
-docstring 'Send a kakoune command to the all sessions' \
-override \
-command-completion \
-params .. \
 %{ nop %sh{ katalk $@ } }
alias global kak kak-talk 

define-command find-file \
-docstring 'Fuzzy search for the files'\
-override \
%{ prompt  -menu \
	-shell-script-candidates %{fd -tf -E "colors/*.kak"} \
    'File: '  %{ try %{ edit -existing %val{text} } }
}
map global user f ':find-file<ret>' \
    -docstring 'Search for the file'

define-command find-buffer \
-docstring 'Open an exising buffer' \
-override \
%{ prompt -menu -buffer-completion 'Buffer: ' 'buffer %val{text}' }
map global user b ':find-buffer<ret>' \
    -docstring 'Serch for the active buffers'

define-command ls \
-docstring 'List files in the current directory' \
-override \
%{ info -title "%val{buffile}" %sh{ ls -Alh } }
map global normal <c-g> ":ls<ret>"

define-command sh \
-override \
-file-completion \
-params 1.. \
%{ echo %sh{ "$@" } }

define-command close-buffers \
-override \
-buffer-completion \
-params 1.. \
%{ evaluate-commands %sh{
    for b in "$@"; do
		echo "db %{$b} ; "
    done
} }

define-command set-filetype \
-docstring 'Set a filetype for current buffer' \
-override \
-params 1 \
%{ set-option current filetype %arg{1} }
alias global lang set-filetype

define-command new-file \
-docstring 'Create a new file(s)'\
-override \
-params 1.. \
%{ echo %sh{ touch "$@" }; edit %arg{1} }
alias global nf new-file


#------------------------------------------------------------------------------
# langmap ---------------------------------------------------------------------

declare-option str def_langmap "en"
declare-option str alt_langmap "ru"
declare-option str current_langmap %opt{def_langmap}
declare-option str langmap_me "%opt{glua}/langmap.py"

set-option global modelinefmt \
'%val{bufname} %val{cursor_line}:%val{cursor_char_column} 
{{context_info}} {{mode_info}} - %val{client}@[%val{session}] - (%opt{current_langmap})'

define-command toggle-langmap \
-override \
%{ evaluate-commands %sh{
    current=
    def="$kak_opt_def_langmap"
    alt="$kak_opt_alt_langmap"
    case "$kak_opt_current_langmap" in
"$def") current="$alt" ;;
        "$alt") current="$def" ;;
    esac
    "$kak_opt_langmap_me" "$kak_opt_current_langmap" "$kak_opt_alt_langmap"
    echo "set buffer current_langmap $current"
} }
map global insert '<c-^>' '<a-;>:toggle-langmap<ret>'

#------------------------------------------------------------------------------
# Autosave
define-command enable-auto-save -override  %{ 
hook buffer -group auto-save NormalKey 'c|(?i)(d|p|u|r)' \
    %{ eval %sh{ if [ $kak_modified == true ]; then printf %s "w"; fi  } }
hook buffer -group auto-save ModeChange '.*:.*:insert' \
    %{ eval %sh{ if [ $kak_modified == true ]; then printf %s "w"; fi  } }
hook buffer -group auto-save ModeChange '.*:insert:.*' \
    %{ eval %sh{ if [ $kak_modified == true ]; then printf %s "w"; fi  } }
}
def disable-auto-save -override %{ rmhooks buffer auto-save }

#------------------------------------------------------------------------------
# Fromat
hook global WinSetOption filetype=(rust|lua|python) \
 %{ evaluate-commands %sh{
     fmt_cmd=
     case "$kak_opt_filetype" in
         "rust") fmt_cmd="rustfmt" ;;
         "lua") fmt_cmd="stylua" ;;
         "python") fmt_cmd="black" ;;
     esac
     if ! type "$fmt_cmd" &> /dev/null; then
     	printf %s "fail Install $fmt_cmd for $kak_buffile"
 	else
         printf %s "set window formatcmd '$fmt_cmd $kak_buffile'"
     fi
 } }

#------------------------------------------------------------------------------
# code-runner -----------------------------------------------------------------
 
declare-option -hidden str run_pos "h"
define-command change-exec-pos \
-docstring 'Toggle vsplit/hsplit' \
-override \
%{ set-option global run_pos %sh{
    	new_pos=
        case "$kak_opt_run_pos" in
    		"h") new_pos="v" ;;
    		"v") new_pos="h" ;;
    		*) new_pos="v" ;;
		esac
		printf %s "$new_pos"
	}
	echo "NEW POS: %opt{run_pos}"
}
map global user s ':change-exec-pos<ret>' \
    -docstring 'Switch run-code split position'

declare-option str runcmd

define-command run-code \
-override \
-params .. \
%{ echo %sh{
    execute= 
    code="$kak_buffile"
    case $kak_opt_filetype in
        "lua") execute="lua $code" ;;
        "python") execute="python $code" ;;
        "sh") execute="bash $code" ;;
        "rust") execute="cargo run"  ;;
    esac
    tmux splitw -"$kak_opt_run_pos" "$execute $@ ; $SHELL"
} }
map global user r ':run-code<ret>' \
    -docstring 'Execute current file'

define-command -hidden run-code-with-args \
    %{ prompt 'Args to code: ' %{ run-code %val{text} }  }
map global user R ':run-code-with-args<ret>' \
    -docstring 'Execute current file with given args'
